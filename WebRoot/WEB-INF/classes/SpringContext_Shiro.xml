<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	   default-lazy-init="true">

   <!-- 权限配置文件 -->
     <bean id="dbe" class="com.thang.executor.DBExecutor">
        <constructor-arg name="driverClassName"  value="${jdbc.driverClassName}"></constructor-arg>
        <constructor-arg name="url"  value="${jdbc.url}"></constructor-arg>
        <constructor-arg name="username"  value="${jdbc.username}"></constructor-arg>
        <constructor-arg name="password"  value="${jdbc.password}"></constructor-arg>
        <constructor-arg name="database"  value="${jdbc.database}"></constructor-arg>
     </bean>
    
    
    <!--权限 定义开始-->
    <!-- 項目自定义的Realm, 所有accountService依赖的dao都需要用depends-on声明 -->
	<bean id="shiroDbRealm" class="com.thang.tools.auth.DBRealm"></bean>
	
	<!-- Shiro's main business-tier object for web-enabled applications -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroDbRealm" />
		<property name="cacheManager" ref="cacheManager" />
        <property name="sessionMode" value="http" /><!-- http|native 
        <property name="sessionManager" ref="sessionManager" /> -->
	</bean>
	
	 <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
	     <!-- Set a net.sf.ehcache.CacheManager instance here if you already have 
            one. If not, a new one will be creaed with a default config:
	     <property name="cacheManager" ref="ehCacheManager" /> -->
	      <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance 
            to inject, but you want a specific Ehcache configuration to be used, specify 
            that here. If you don't, a default will be used.: <property name="cacheManagerConfigFile" 
            value="classpath:some/path/to/ehcache.xml"/> -->
	 </bean>
	
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO" ref="sessionDAO" />
    </bean>

    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache" /> 
    </bean>

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/web/user/login" />
		<property name="successUrl" value="/web/main" />
		<property name="filterChainDefinitions">
			<value>
				/web/login = authc
				/web/logout = logout
				/tools/** = anon
				/web/system/** = roles[admin]
				/web/ =anon
				/web/index=anon
				/web/** = user
			</value>
		</property>
	</bean>
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	 <!-- Post processor that automatically invokes init() and destroy() methods 
        for Spring-configured Shiro objects so you don't have to 1) specify an init-method 
        and destroy-method attributes for every bean definition and 2) even know 
        which Shiro objects require these methods to be called. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
 
</beans>
